#**
	Copyright 2012 the original author or authors.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*#
package ${packageName};

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import com.github.lightning.Marshaller;
import com.github.lightning.instantiator.ObjectInstantiatorFactory;
import com.github.lightning.internal.ClassDescriptorAwareSerializer;
import com.github.lightning.internal.generator.AbstractGeneratedMarshaller;
import com.github.lightning.metadata.ClassDefinitionContainer;
import com.github.lightning.metadata.PropertyAccessor;
import com.github.lightning.metadata.PropertyDescriptor;

public final class ${className} extends AbstractGeneratedMarshaller {

#foreach( $property in ${properties} )
	private final Marshaller ${support.toFinalFieldName($property)};
#end

	public ${className} (Class<?> marshalledType, Map<Class<?>, Marshaller> marshallers,
		ClassDescriptorAwareSerializer serializer, ObjectInstantiatorFactory objectInstantiatorFactory,
		List<PropertyDescriptor> propertyDescriptors) {
		
		super(marshalledType, marshallers, serializer, objectInstantiatorFactory);
#foreach( $property in ${properties} )

		PropertyDescriptor ${property.propertyName} = findPropertyDescriptor("${property.propertyName}", propertyDescriptors);
		Marshaller ${property.propertyName}Marshaller = ${property.propertyName}.getMarshaller();
		if (${property.propertyName}Marshaller == null) {
			${property.propertyName}Marshaller = findMarshaller(${property.propertyName}.getType());
		}
		${support.toFinalFieldName($property)} = ${property.propertyName}Marshaller;
#end	
	}
	
	public void marshall(Object value, Class<?> type, DataOutput dataOutput, ClassDefinitionContainer classDefinitionContainer) throws IOException {
#foreach( $property in ${properties} )
		PropertyAccessor ${property.propertyName}PropertyAccessor = getPropertyAccessor("${property.propertyName}");
		Class<?> ${property.propertyName}PropertyType = ${property.propertyName}PropertyAccessor.getType();
		this.${support.toFinalFieldName($property)}.marshall(${support.generateReader($property)}, ${property.propertyName}PropertyType, dataOutput, classDefinitionContainer);

#end
	}
	
	public <V> V unmarshall(V instance, Class<?> type, DataInput dataInput, ClassDefinitionContainer classDefinitionContainer) throws IOException {
#foreach( $property in ${properties} )
		PropertyAccessor ${property.propertyName}PropertyAccessor = getPropertyAccessor("${property.propertyName}");
		Class<?> ${property.propertyName}PropertyType = ${property.propertyName}PropertyAccessor.getType();
		Object ${property.propertyName}Value = this.${support.toFinalFieldName($property)}.unmarshall(${property.propertyName}PropertyType, dataInput, classDefinitionContainer);
		${support.generateWriter($property, "instance")}

#end
		return instance;
	}
	
	private PropertyDescriptor findPropertyDescriptor(String propertyName, List<PropertyDescriptor> propertyDescriptors) {
		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
			if (propertyDescriptor.getPropertyName().equals(propertyName)) {
				return propertyDescriptor;
			}
		}
		return null;
	}
}
