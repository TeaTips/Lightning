
package com.github.lightning.maven.integration;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import com.github.lightning.Marshaller;
import com.github.lightning.SerializationContext;
import com.github.lightning.instantiator.ObjectInstantiatorFactory;
import com.github.lightning.internal.ClassDescriptorAwareSerializer;
import com.github.lightning.internal.generator.AbstractGeneratedMarshaller;
import com.github.lightning.metadata.PropertyAccessor;
import com.github.lightning.metadata.PropertyDescriptor;

public final class FooLightningGeneratedMarshaller extends AbstractGeneratedMarshaller {

	private final Marshaller MARSHALLER_BAR_LIGHTNING;
	private final PropertyAccessor ACCESSOR_BAR_LIGHTNING;
	private final Marshaller MARSHALLER_FOO_LIGHTNING;
	private final PropertyAccessor ACCESSOR_FOO_LIGHTNING;

	public FooLightningGeneratedMarshaller (Class<?> marshalledType, Map<Class<?>, Marshaller> marshallers,
		ClassDescriptorAwareSerializer serializer, ObjectInstantiatorFactory objectInstantiatorFactory,
		List<PropertyDescriptor> propertyDescriptors) {
		
		super(marshalledType, marshallers, serializer, objectInstantiatorFactory);

		PropertyDescriptor bar = findPropertyDescriptor("bar", propertyDescriptors);
		Marshaller barMarshaller = bar.getMarshaller();
		if (barMarshaller == null) {
			barMarshaller = findMarshaller(bar.getType());
		}
		MARSHALLER_BAR_LIGHTNING = barMarshaller;

		ACCESSOR_BAR_LIGHTNING = getPropertyAccessor("bar");

		PropertyDescriptor foo = findPropertyDescriptor("foo", propertyDescriptors);
		Marshaller fooMarshaller = foo.getMarshaller();
		if (fooMarshaller == null) {
			fooMarshaller = findMarshaller(foo.getType());
		}
		MARSHALLER_FOO_LIGHTNING = fooMarshaller;

		ACCESSOR_FOO_LIGHTNING = getPropertyAccessor("foo");
	}
	
	public void marshall(Object value, Class<?> type, DataOutput dataOutput, SerializationContext serializationContext) throws IOException {
		if (isAlreadyMarshalled(value, type, dataOutput, serializationContext)) {
			return;
		}

		PropertyAccessor barPropertyAccessor = this.ACCESSOR_BAR_LIGHTNING;
		Class<?> barPropertyType = barPropertyAccessor.getType();
		this.MARSHALLER_BAR_LIGHTNING.marshall(Integer.valueOf(barPropertyAccessor.readInt(value)), barPropertyType, dataOutput, serializationContext);

		PropertyAccessor fooPropertyAccessor = this.ACCESSOR_FOO_LIGHTNING;
		Class<?> fooPropertyType = fooPropertyAccessor.getType();
		this.MARSHALLER_FOO_LIGHTNING.marshall(fooPropertyAccessor.readObject(value), fooPropertyType, dataOutput, serializationContext);

	}
	
	public <V> V unmarshall(V instance, Class<?> type, DataInput dataInput, SerializationContext serializationContext) throws IOException {
		PropertyAccessor barPropertyAccessor = this.ACCESSOR_BAR_LIGHTNING;
		Class<?> barPropertyType = barPropertyAccessor.getType();
		Object barValue = this.MARSHALLER_BAR_LIGHTNING.unmarshall(barPropertyType, dataInput, serializationContext);
		barPropertyAccessor.writeInt(instance, ((Integer) barValue).intValue());

		PropertyAccessor fooPropertyAccessor = this.ACCESSOR_FOO_LIGHTNING;
		Class<?> fooPropertyType = fooPropertyAccessor.getType();
		Object fooValue = this.MARSHALLER_FOO_LIGHTNING.unmarshall(fooPropertyType, dataInput, serializationContext);
		fooPropertyAccessor.writeObject(instance, fooValue);

		return instance;
	}
	
	private PropertyDescriptor findPropertyDescriptor(String propertyName, List<PropertyDescriptor> propertyDescriptors) {
		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
			if (propertyDescriptor.getPropertyName().equals(propertyName)) {
				return propertyDescriptor;
			}
		}
		return null;
	}
}

